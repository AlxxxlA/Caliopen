@startuml
title Message creation & sending
box "User frontend"
actor "authenticated user" as user
participant "new message UI" as compose
endbox
box "python application"
control py.api
participant py.main
endbox
box "go application"
control go.api
participant go.main
endbox
database db
database index
box "NATS"
entity "outboundSMTP channel" as out
endbox
box "Brokers"
participant "Email broker" as eb
endbox
group could be offline
user o-> compose : hit 'compose' or 'reply'
activate compose
end
hnote over compose : online
compose -[#00FF00]> py.api : [POST api/v1/messages]
py.api -> py.main: "create_draft"
activate py.main
py.main -> py.main : draft validation
py.main -> db : store message (draft status)
py.main -> index : index message (draft status)
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : message url
loop every 10 sec.
compose -[#00FF00]> py.api: auto save draft\n[PATCH /messages/{message_id}]
py.api -> py.main : "patch_draft"
activate py.main
py.main x-> db : get_db
py.main -> py.main : patch validation
py.main -> db : store draft
py.main -> index : index draft
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
end
deactivate compose
user o-> compose : hit 'save'
activate compose
compose -[#00FF00]> py.api: save draft\n[PATCH /messages/{message_id}]
py.api -> py.main : "patch_draft"
activate py.main
py.main x-> db : get_db
py.main -> py.main : patch validation
py.main -> db : store draft
py.main -> index : index draft
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
deactivate compose
alt edit draft
user o-> compose : hit 'edit draft'
activate compose
compose -[#00FF00]> py.api : edit draft\n[GET /messages/{message_id}]
py.api -> py.main : get_message
py.main x-> db : get_db
py.main -> py.api : message
py.api -[#00FF00]> compose : message
loop every 5 sec.
compose -[#00FF00]> py.api : auto save draft\n[PATCH /messages/{message_id}]
py.api -> py.main : "patch_draft"
activate py.main
py.main x-> db : get_db
py.main -> py.main : patch validation
py.main -> db : store draft
py.main -> index : index draft
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
end
deactivate compose
user o-> compose : hit 'save'
activate compose
compose -[#00FF00]> py.api : save draft\n[PATCH /messages/{message_id}]
py.api -> py.main : "patch_draft"
activate py.main
py.main x-> db : get_db
py.main -> py.main : patch validation
py.main -> db : store draft
py.main -> index : index draft
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
deactivate compose
end
alt send draft
user o-> compose : hit 'send message'
activate compose
compose -[#00FF00]> py.api : save draft\n[PATCH /messages/{message_id}]
py.api -> py.main : "patch_draft"
activate py.main
py.main x-> db : get_db
py.main -> py.main : patch validation
py.main -> db : store draft
py.main -> index : index draft
py.main -> py.api : response
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
compose -[#00FF00]> go.api : send message\n[POST /messages/{message_id}/actions]
go.api -> go.main : "SendDraft"
activate go.main
go.main -[#0000FF]> out : "deliver" order with message_id
eb x-[#0000FF]> out : subscribe "deliver"
activate eb
note right: email delivery process
eb x-> db : get raw_message
eb -> eb : marshal email, etc.
eb -> mta : send message
mta -> eb : OK
eb -> db : update store (sent)
eb -> index : update index (sent)
eb -[#0000FF]> out: "deliver" response
deactivate eb
go.main x-[#0000FF]> out : async "deliver" response
go.main x-> db : get_message
go.main -> go.api : send back updated message
deactivate go.main
go.api -[#00FF00]> compose : updated message
deactivate compose
end
deactivate compose
alt delete draft
user o-> compose: hit 'delete draft'
activate compose
compose -[#00FF00]> py.api : delete draft\n[DELETE /messages/{message_id}]
py.api -> py.main: "delete_message"
activate py.main
py.main -> py.main: delete procedure
py.main -> db: write delete state
py.main -> index: write delete state
py.main -> py.api: ack or error
deactivate py.main
py.api -[#00FF00]-> compose : error or 204 OK
deactivate compose
end
@enduml